// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  password         String            @map("password_hash")
  birthDate        DateTime          @map("birth_date")
  isActive         Boolean           @default(false) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at")
  profiles         Profile[]
  userWatchTime    UserVideoWatchtime[]
  resetTokens      ResetToken[]
  activationCodes  ActivationCode[]
}

model ActivationCode {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  code       String   @unique
  createdAt  DateTime @default(now()) @map("created_at")
  expiresAt  DateTime @map("expires_at")
  used       Boolean  @default(false)
}

model Profile {
  id             Int                    @id @default(autoincrement())
  user           User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  name           String
  avatarUrl      String?                @map("avatar_url")
  isKidsProfile  Boolean                @default(false) @map("is_kids_profile")
  createdAt      DateTime               @default(now()) @map("created_at")
  favorites      Favorite[]
  myList         MyList[]
  subscriptions  ChannelSubscription[]
  playback       PlaybackSession[]
  watchTime      ProfileVideoWatchtime[]
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  videos VideoGenre[]
}

model Video {
  id           Int               @id @default(autoincrement())
  title        String
  description  String?
  releaseYear  Int?              @map("release_year")
  type         String
  thumbnailUrl String?           @map("thumbnail_url")
  videoUrl     String?           @map("video_url")
  ageRating    String?           @map("age_rating")
  createdAt    DateTime          @default(now()) @map("created_at")
  genres       VideoGenre[]
  watchTime    ProfileVideoWatchtime[]
  userWatch    UserVideoWatchtime[]
  myList       MyList[]
  favorites    Favorite[]
  sessions     PlaybackSession[]
  trending     Trending[]
  backdrops    Backdrop[]
  posters      Poster[]
  extras       VideoExtra[]
  casts        Cast[]
  videoChannels VideoChannel[]
}

model VideoGenre {
  video   Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId Int
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId Int

  @@id([videoId, genreId])
}

model PlaybackSession {
  id        Int       @id @default(autoincrement())
  profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int
  video     Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   Int
  startedAt DateTime  @map("started_at")
  endedAt   DateTime?
}

model ProfileVideoWatchtime {
  id         Int       @id @default(autoincrement())
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId  Int
  video      Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    Int
  totalWatch Int       @default(0) @map("total_watch_time_seconds")
  updatedAt  DateTime  @default(now()) @map("last_updated")

  @@unique([profileId, videoId])
}

model UserVideoWatchtime {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  video      Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    Int
  totalWatch Int       @default(0) @map("total_watch_time_seconds")
  updatedAt  DateTime  @default(now()) @map("last_updated")

  @@unique([userId, videoId])
}

model MyList {
  id        Int      @id @default(autoincrement())
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   Int
  addedAt   DateTime @default(now()) @map("added_at")

  @@unique([profileId, videoId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   Int
  addedAt   DateTime @default(now()) @map("added_at")

  @@unique([profileId, videoId])
}

model Channel {
  id         Int              @id @default(autoincrement())
  name       String           @unique
  logoUrl    String?          @map("logo_url")
  videos     VideoChannel[]
  subscribers ChannelSubscription[]
}

model VideoChannel {
  video     Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   Int
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int

  @@id([videoId, channelId])
}

model ChannelSubscription {
  id          Int      @id @default(autoincrement())
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   Int
  channel     Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId   Int
  subscribedAt DateTime @default(now()) @map("subscribed_at")

  @@unique([profileId, channelId])
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
}

model Trending {
  id         Int     @id @default(autoincrement())
  video      Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    Int
  rank       Int
  viewCount  Int      @map("view_count")
  recordedAt DateTime @default(now()) @map("recorded_at")
}

model Backdrop {
  id        Int      @id @default(autoincrement())
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   Int
  imageUrl  String   @map("image_url")
  addedAt   DateTime @default(now()) @map("added_at")
}

model Poster {
  id        Int      @id @default(autoincrement())
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   Int
  imageUrl  String   @map("image_url")
  addedAt   DateTime @default(now()) @map("added_at")
}

model VideoExtra {
  id        Int      @id @default(autoincrement())
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   Int
  videoUrl  String   @map("video_url")
  type      String
  addedAt   DateTime @default(now()) @map("added_at")
}

model Cast {
  id            Int      @id @default(autoincrement())
  video         Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId       Int
  artistName    String   @map("artist_name")
  characterName String   @map("character_name")
  profileImage  String?  @map("profile_image_url")
  addedAt       DateTime @default(now()) @map("added_at")
}
